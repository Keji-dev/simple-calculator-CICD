pipeline {
    agent none  // Ningún agente global, cada etapa especificará su propio agente

    stages {
        stage('Build') {
            agent { label 'unit' }  // Agente de compilación (unit)
            steps {
                echo 'Esto es una etapa Build de ejemplo'
                sh 'ls -la'
                sh 'echo $WORKSPACE'
            }
        }

        stage('Services') {
            parallel {
                stage('Wiremock Server') {
                    agent { label 'flask' }  // Agente para Wiremock (flask en este caso)
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                docker run -d -p 9090:8080 --name wiremock \
                                -v $(pwd)/test/wiremock/mappings:/home/wiremock/mappings \
                                wiremock/wiremock:latest
                                sleep 10
                                whoami
                                hostname
                                echo "[INFO] Conectando al contenedor Wiremock..."
                                docker ps -a
                                curl -s http://localhost:9090
                            '''
                            stash name: 'wiremock_data', includes: '**/test/wiremock/mappings/*'  // Stash para compartir archivos entre agentes
                        }
                    }
                }

                stage('Flask Server') {
                    agent { label 'flask' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                export FLASK_APP=app/api.py
                                nohup flask run --host=0.0.0.0 --port=5000 & 
                                sleep 5
                                curl -s http://localhost:5000 || echo "[ERROR] Flask no responde"
                                until curl -s http://localhost:5000; do
                                    echo "[INFO] Esperando que Flask se inicie..."
                                    sleep 5
                                done
                                echo "[OK] Flask está listo"
                                whoami
                                hostname
                                netstat -tuln
                            '''
                            stash name: 'flask_data', includes: '**/app/api.py'  // Stash para datos de Flask
                        }
                    }
                }
            }
        }

        stage('Tests') {
            parallel {
                stage('Unit') {
                    agent { label 'unit' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            unstash 'wiremock_data'  // Recuperamos los datos stashados en etapas previas
                            echo "[INFO] Ejecutando pruebas unitarias..."
                            export PYTHONPATH=$(pwd) && pytest --junitxml=result-unit.xml test/unit/
                            cat result-unit.xml
                        }
                    }
                }

                stage('Rest') {
                    agent { label 'flask' }
                    steps {
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            sh '''
                                echo "[INFO] Ejecutando pruebas REST..."
                                export PYTHONPATH=$WORKSPACE
                                pytest test/rest/api_test.py --junitxml=result-rest.xml
                                cat result-rest.xml  # Muestra el XML de resultados de las pruebas REST para depuración
                            '''
                        }
                    }
                }
            }
        }

        stage('Results') {
            agent { label 'unit' }
            steps {
                junit 'result*.xml'  // Analizar resultados de pruebas
            }
        }
    }

    post {
        always {
            agent { label 'flask' }  // Se podría usar un agente común como 'flask'
            steps {
                echo "[INFO] Limpiando recursos..."
                sh '''
                    docker stop wiremock || true
                    docker rm wiremock || true
                    pkill -f "flask" || true
                '''
            }
        }
    }
}
